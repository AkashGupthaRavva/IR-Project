import json
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Function to load documents from a JSON file generated by Scrapy
def load_documents(filename):
    with open(filename, 'r') as file:
        documents_data = json.load(file)
        # Assuming each item in the JSON file has a 'content' key
        documents = [doc['content'] for doc in documents_data]
    return documents

# Function to create and save TF-IDF matrix and features
def create_tfidf_index(documents, filename='inverted_index.pkl'):
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(documents)
    with open(filename, 'wb') as f:
        pickle.dump({'matrix': tfidf_matrix, 'features': vectorizer.get_feature_names_out()}, f)
    return vectorizer, tfidf_matrix

# Function to display a DataFrame of the TF-IDF matrix
def display_tfidf_matrix(tfidf_matrix, feature_names):
    df = pd.DataFrame(tfidf_matrix.toarray(), columns=feature_names)
    print("TF-IDF Matrix:")
    print(df)

# Function to calculate and display cosine similarity matrix
def display_cosine_similarity(tfidf_matrix):
    cosine_sim_matrix = cosine_similarity(tfidf_matrix)
    df = pd.DataFrame(cosine_sim_matrix)
    print("\nCosine Similarity Matrix:")
    print(df)

# Main function to execute the workflow
def main():
    # Load documents from Scrapy's output JSON file
    documents = load_documents('/Users/akashguptharavva/Library/Mobile Documents/com~apple~CloudDocs/IRO-Assignment/output.json')
    
    # Create TF-IDF index and get vectorizer and matrix
    vectorizer, tfidf_matrix = create_tfidf_index(documents)
    
    # Display TF-IDF matrix and cosine similarity
    display_tfidf_matrix(tfidf_matrix, vectorizer.get_feature_names_out())
    display_cosine_similarity(tfidf_matrix)

# Run the main function
if __name__ == "__main__":
    main()
